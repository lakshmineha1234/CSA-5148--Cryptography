#include <stdio.h>
#include <stdlib.h>

// Function to compute the greatest common divisor (GCD) using Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    int n = 3599;   // Given n = pq
    int e = 31;     // Given public key e
    int plaintext_block = 23; // Example known plaintext block (must share a common factor with n)

    // Step 1: Find GCD of the plaintext block and n
    int factor = gcd(plaintext_block, n);
    
    if (factor == 1 || factor == n) {
        printf("The given plaintext block does not help in factorizing n.\n");
        return 1;
    }

    // Step 2: Verify that we found a prime factor of n
    printf("One prime factor of n is: %d\n", factor);

    // Step 3: Calculate the other prime factor
    int other_factor = n / factor;
    printf("The other prime factor of n is: %d\n", other_factor);

    // Step 4: Calculate phi(n)
    int phi = (factor - 1) * (other_factor - 1);
    printf("phi(n) = %d\n", phi);

    // Step 5: Use Extended Euclidean Algorithm to find d, the private key
    int x, y;
    int gcd = extended_gcd(e, phi, &x, &y);
    if (gcd != 1) {
        printf("Multiplicative inverse doesn't exist\n");
        return 1;
    }

    // Make x positive
    if (x < 0) x += phi;
    int d = x;
    printf("Private key d = %d\n", d);

    return 0;
}

// Extended Euclidean Algorithm to find the multiplicative inverse of e mod phi
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0;
        *y = 1;
        return b;
    }

    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);

    *x = y1 - (b / a) * x1;
    *y = x1;

    return gcd;
}
