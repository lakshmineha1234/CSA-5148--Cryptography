#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define MAX_SIZE 10

// Function to encrypt plaintext using Hill cipher
void hill_encrypt(const char *plaintext, const int key[MAX_SIZE][MAX_SIZE], int key_size, char *ciphertext) {
    int len = strlen(plaintext);
    int dim = sqrt(key_size);
    int i, j, k;
    int sum;

    for (i = 0; i < len; i += dim) {
        for (j = 0; j < dim; j++) {
            sum = 0;
            for (k = 0; k < dim; k++) {
                sum += (key[j][k] * (plaintext[i + k] - 'A')) % 26;
            }
            ciphertext[i + j] = (sum % 26) + 'A';
        }
    }
    ciphertext[len] = '\0';
}

// Function to decrypt ciphertext using Hill cipher
void hill_decrypt(const char *ciphertext, const int key[MAX_SIZE][MAX_SIZE], int key_size, char *plaintext) {
    int len = strlen(ciphertext);
    int dim = sqrt(key_size);
    int i, j, k;
    int sum, det;

    // Calculate determinant of the key matrix
    det = key[0][0] * (key[1][1] * key[2][2] - key[1][2] * key[2][1])
          - key[0][1] * (key[1][0] * key[2][2] - key[1][2] * key[2][0])
          + key[0][2] * (key[1][0] * key[2][1] - key[1][1] * key[2][0]);

    // Calculate inverse of the determinant modulo 26
    det %= 26;
    if (det < 0) {
        det += 26;
    }
    for (i = 1; i < 26; i++) {
        if ((det * i) % 26 == 1) {
            det = i;
            break;
        }
    }

    // Calculate inverse of the key matrix
    int inv_key[MAX_SIZE][MAX_SIZE];
    inv_key[0][0] = (key[1][1] * key[2][2] - key[1][2] * key[2][1]) * det % 26;
    inv_key[0][1] = (key[0][2] * key[2][1] - key[0][1] * key[2][2]) * det % 26;
    inv_key[0][2] = (key[0][1] * key[1][2] - key[0][2] * key[1][1]) * det % 26;
    inv_key[1][0] = (key[1][2] * key[2][0] - key[1][0] * key[2][2]) * det % 26;
    inv_key[1][1] = (key[0][0] * key[2][2] - key[0][2] * key[2][0]) * det % 26;
    inv_key[1][2] = (key[0][2] * key[1][0] - key[0][0] * key[1][2]) * det % 26;
    inv_key[2][0] = (key[1][0] * key[2][1] - key[1][1] * key[2][0]) * det % 26;
    inv_key[2][1] = (key[0][1] * key[2][0] - key[0][0] * key[2][1]) * det % 26;
    inv_key[2][2] = (key[0][0] * key[1][1] - key[0][1] * key[1][0]) * det % 26;

    // Handle negative values in the inverse key matrix
    for (i = 0; i < dim; i++) {
        for (j = 0; j < dim; j++) {
            if (inv_key[i][j] < 0) {
                inv_key[i][j] += 26;
            }
        }
    }

    // Decrypt ciphertext using the inverse key matrix
    for (i = 0; i < len; i += dim) {
        for (j = 0; j < dim; j++) {
            sum = 0;
            for (k = 0; k < dim; k++) {
                sum += (inv_key[j][k] * (ciphertext[i + k] - 'A')) % 26;
            }
            plaintext[i + j] = (sum % 26) + 'A';
        }
    }
    plaintext[len] = '\0';
}

// Function to generate key matrix from key string
void generate_key_matrix(const char *key_str, int key[MAX_SIZE][MAX_SIZE], int dim) {
    int i, j, k = 0;
    for (i = 0; i < dim; i++) {
        for (j = 0; j < dim; j++) {
            key[i][j] = toupper(key_str[k]) - 'A';
            k = (k + 1) % strlen(key_str);
        }
    }
}

int main() {
    char plaintext[] = "HELLO"; // Known plaintext
    char ciphertext[] = "SWYRJ"; // Corresponding ciphertext
    char decrypted_text[strlen(ciphertext) + 1];

    int key_size = 9; // Size of the key matrix (3x3)
    char key_str[] = "GYBNQKURP"; // Key string

    int key[MAX_SIZE][MAX_SIZE];

    // Generate key matrix from key string
    generate_key_matrix(key_str, key, sqrt(key_size));

    // Decrypt known ciphertext to obtain the plaintext
    hill_decrypt(ciphertext, key, key_size, decrypted_text);

    printf("Known plaintext: %s\n", plaintext);
    printf("Corresponding ciphertext: %s\n", ciphertext);
    printf("Recovered plaintext: %s\n", decrypted_text);

    return 0;
}
