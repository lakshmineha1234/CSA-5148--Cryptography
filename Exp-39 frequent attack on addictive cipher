#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to calculate letter frequency of a string
void calculate_letter_frequency(const char *text, int *frequency) {
    for (int i = 0; text[i] != '\0'; i++) {
        char c = toupper(text[i]);
        if (isalpha(c)) {
            frequency[c - 'A']++;
        }
    }
}

// Function to perform letter frequency attack on an additive cipher
void letter_frequency_attack(const char *ciphertext, char **possible_plaintexts, int num_plaintexts) {
    int ciphertext_len = strlen(ciphertext);
    int frequency[ALPHABET_SIZE] = {0};
    calculate_letter_frequency(ciphertext, frequency);

    // Calculate the most likely shift based on frequency analysis
    int max_freq_index = 0;
    for (int i = 1; i < ALPHABET_SIZE; i++) {
        if (frequency[i] > frequency[max_freq_index]) {
            max_freq_index = i;
        }
    }

    // Assuming the most frequent letter in English is 'E' (which corresponds to index 4 in frequency array)
    int shift = (max_freq_index - 4 + ALPHABET_SIZE) % ALPHABET_SIZE;

    // Generate possible plaintexts using the calculated shift
    for (int i = 0; i < num_plaintexts; i++) {
        possible_plaintexts[i] = (char *)malloc((ciphertext_len + 1) * sizeof(char));
        for (int j = 0; j < ciphertext_len; j++) {
            char c = ciphertext[j];
            if (isalpha(c)) {
                char decrypted_char = 'A' + (c - 'A' - shift + ALPHABET_SIZE) % ALPHABET_SIZE;
                possible_plaintexts[i][j] = decrypted_char;
            } else {
                possible_plaintexts[i][j] = c;
            }
        }
        possible_plaintexts[i][ciphertext_len] = '\0';
        shift = (shift + 1) % ALPHABET_SIZE; // Increment shift for the next possible plaintext
    }
}

int main() {
    char ciphertext[] = "VSRQJEGGRCKH"; // Example ciphertext
    int num_plaintexts = 10;
    char *possible_plaintexts[num_plaintexts];

    letter_frequency_attack(ciphertext, possible_plaintexts, num_plaintexts);

    printf("Possible plaintexts in rough order of likelihood:\n");
    for (int i = 0; i < num_plaintexts; i++) {
        printf("%d. %s\n", i + 1, possible_plaintexts[i]);
        free(possible_plaintexts[i]); // Free allocated memory
    }

    return 0;
}
