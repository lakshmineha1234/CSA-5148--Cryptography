#include <stdio.h>
int modInverse(int a, int m) {
    a = a % m;
    int x;
    for (x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}
void affineDecrypt(char* ciphertext, int a, int b) {
    int a_inv = modInverse(a, 26);
    if (a_inv == -1) {
        printf("No modular inverse for the given 'a'. Decryption not possible.\n");
        return;
    }
    int i;
    for ( i = 0; ciphertext[i] != '\0'; ++i) {
        if (isalpha(ciphertext[i])) {
            char offset = isupper(ciphertext[i]) ? 'A' : 'a';
            ciphertext[i] = (a_inv * (ciphertext[i] - offset - b + 26)) % 26 + offset;
        }
    }
}
int main() {
    char ciphertext[] = "Your ciphertext here";
    int a, b;
    a = 15; 
    b = 15; 
    affineDecrypt(ciphertext, a, b);

    printf("Decrypted text: %s\n", ciphertext);

    return 0;
}
